@using PickAndGo.ViewModels
@model IEnumerable<ShoppingCartVM>


@{
    ViewData["Title"] = "Shopping Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int? customerId = Context.Session.GetInt32("customerId");


}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<div class="justify-content-center align-items-center">
    <div>
        <div class="shopping-title">
            <h1>Shopping Cart</h1>
        </div>
        <div class="container-fluid">
            <table class="table text-start">
            <thead>
              <tr>
                        <th scope="col" class="col-1"></th>
                        <th scope="col" class="col-5">Sandwich</th>
                        <th scope="col" class="col-1">Price</th>
                        <th scope="col" class="col-1"></th>
                        <th scope="col" class="col-1"></th>
                        <th scope="col" class="col-1"></th>
              </tr>
            </thead>
              <tbody class="">
              @foreach (var item in Model.Select((value, index) => new { Value = value, Index = index }))
              {
                <tr class="ml-0">

                  <td class="col-1">
                    <button class="accordion-button show" type="button" data-bs-toggle="collapse" data-bs-target="#@($"item-{item.Index}")" aria-expanded="false" aria-controls="@($"item-{item.Index}")">
                    </button>
                  </td>

                  <td class="col-5">@item.Value.description</td>
                  <td class ="col-1"><span id="@item.Value.productId-amount" class="amount">@item.Value.subtotal</span></td>
                  <td></td>
                  <td></td>
                      <td>
                       <a class="btn btn-secondary" asp-route-index="@item.Index" asp-route-removeItem="again" asp-area="" asp-controller="Order" asp-action="EditCustomize">Order Again</a>
                      </td>
                      <td>
                       <a class="btn btn-primary" asp-route-index="@item.Index" asp-route-removeitem="edit" asp-area="" asp-controller="Order" asp-action="EditCustomize">Edit</a>
                      </td>
                      <td>
                            <button class="btn btn-danger" id="btnRemove" OnClick="removeSandwich(@item.Index)">Remove</button>
                      </td>
                </tr>

                <tr id="@($"item-{item.Index}")" class="accordion-collapse collapse show col-md" aria-labelledby="@item.Value.productId">
   
                  <td colspan="12">
                    <table class="accordion-table container">
                    <thead>
                        <tr>
                            <th scope="col" class="col-4">Ingredient</th>
                            <th scope="col" class="col-2">Quantity</th>
                            <th scope="col" class="col-2">Sub Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="col-4">Base sandwich price</td>
                            <td class="col-2">N/A</td>
                            <td class="col-2">@item.Value.productPrice</td>
                        </tr>
                        @foreach (var ingredient in item.Value.ingredients)
                        {
                            decimal price = (Convert.ToDecimal(ingredient.price) * Convert.ToDecimal(ingredient.quantity));
                            <tr>
                               <td class="col-4">@ingredient.description</td>  
                               @if (ingredient.quantity == "1") {
                               <td class="col-1">Regular</td>
                               } else {
                               <td class="col-1">Extra</td>
                               }
                               <td class="col-1">@price</td>
                               <td class="col-6"></td>
                            </tr>
                        }
                     </tbody>
                    </table>

                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>

        <footer >

            <div>
                <label>Total: $</label>
                <span id="totalAmount">0</span>
                <input id="currency" hidden value="CAD" />
            </div>
            <br />
            <div>
                @{
                    var dataTargetConfirm = "#ModalYes";
                    var modalID = "ModalYes";
                }
                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="@dataTargetConfirm">Proceed</button>

                <!-- Modal -->
                <div class="modal fade" id=@modalID tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true" >
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="confirmModalLabel">Checkout and Pay</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">

                                <div>

                                    <h4>Pick up time</h4>
                                    <select id="pickupTime" name="pickupTime" required>
                                        @{
                                            // Get the time after 20mins from current time
                                            var currentTime = DateTime.Now;
                                            var timeToAdd = new TimeSpan(0, 20, 0);
                                            var pickupTime = currentTime.Add(timeToAdd);

                                            // round up the time per 20mins
                                            var roundedTime = new DateTime(pickupTime.Year, pickupTime.Month, pickupTime.Day, pickupTime.Hour, (pickupTime.Minute / 20) * 20, 0);

                                            // set business hour (9-22) and create a dropdown list between the time
                                            if (roundedTime.Hour >= 9 && roundedTime.Hour < 22)
                                            {
                                                // loop eace 20mins until 22
                                                for (var j = roundedTime; j <= new DateTime(roundedTime.Year, roundedTime.Month, roundedTime.Day, 22, 0, 0); j = j.AddMinutes(20))
                                                {
                                                    <option value="@j.ToString("yyyy-MM-ddTHH:mm:ss")">@j.ToString("h:mm tt")</option>
                                                }
                                            }
                                            // if the time is not between 9 to 22, show we are closed
                                            else
                                            {
                                                <option value="">Sorry, We are closed!</option>
                                            }
                                        }
                                    </select>
                                    <br />
                                    <br />
                                </div>
                                @if (customerId == null)
                                {
                                    <h4> Please input your email for a receipt</h4>
                                    <label for="email">Email address</label>
                                    <input id="email" type="email" class="form-control" name="email" required pattern="^[a-zA-Z0-9._+-]+@("@")[a-zA-Z0-9.-]+\.[a-zA-Z]{2,9}$">
                                }
                                <br />
                            </div>
                            <div class="modal-footer">
                                <div class="mt-3" id="paypal-button">@Html.Partial("PayPalJS")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </footer>
    </div>
</div>
<style>
    #paypal-button {
        display: none;
    }
</style>
<script>
    $(document).ready(function () {
        var totalAmountId = "#totalAmount";
        var totalAmount = 0.00;
        $('.amount').each(function () {
            var thisAmount = $(this).html();
            totalAmount += parseFloat(thisAmount);
        });
        $(totalAmountId).html(totalAmount.toFixed(2));
    });

    $(document).ready(function() {
        // Hide the PayPal button initially
        $("#paypal-button").hide();

        // Add event listener to email input field
        $("#email").on("input", function() {
            // Get the input value
            var email = $(this).val();

            // Check if the input is a valid email address
            if (/\S+@@\S+\.\S+/.test(email)) {
                // If the input is a valid email address, show the PayPal button
                $("#paypal-button").show();
            } else {
                // If the input is not a valid email address, hide the PayPal button
                $("#paypal-button").hide();
            }
        });

        // Check for customerId and show the PayPal button if customerId is present
        //var customerId = $("#customerId").val();
        var customerId = '@customerId';
        console.log("customerID", customerId);
        if (customerId) {
            $("#paypal-button").show();
        }
    });
</script>

<script src="~/lib/jquery/dist/cart.js"></script>


