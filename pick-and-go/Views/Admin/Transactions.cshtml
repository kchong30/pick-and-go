@using PickAndGo.Utilities;
@using PickAndGo.ViewModels;
@model PaginatedList<OrderTransactionVM>;

@{
    ViewData["Title"] = "Transactions";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var fromDate = @ViewBag.CurrentFromDate;
    var toDate = @ViewBag.CurrentToDate;
    var isCustomer = @ViewBag.searchFilter == "customer" ? true : false;
    var isOrderNum = @ViewBag.searchFilter == "orderNum" ? true : false;
}

<main class="transactions">
    <h1>Transactions</h1>
    <div class="order-title d-flex justify-content-between">
        <div class="date-filter">
            <form asp-controller="Admin" asp-action="Transactions">
                <input type="hidden" name="searchName" value="@ViewData["CurrentNameSearch"]" />
                <input type="hidden" name="searchOrder" value="@ViewData["CurrentOrderSearch"]" />
                <input type="date" name="dateFrom" value=@fromDate required />
                <input type="date" name="dateTo" value=@toDate required />
                <button type="submit" value="Refresh" class="icon-btn"><i class="fa-solid fa-arrows-rotate"></i></button>
            </form>
        </div>

        <div class="order-search">

            <form asp-controller="Admin" asp-action="Transactions">
                <input type="hidden" name="dateFrom" value="@fromDate" />
                <input type="hidden" name="dateTo" value="@toDate" />


                @Html.DropDownList("searchFilter", new List<SelectListItem>
                {
                new SelectListItem { Text = "Customer", Value = "customer", Selected=isCustomer},
                new SelectListItem { Text = "Order#", Value = "orderNum", Selected=isOrderNum}
                })
                <input type="text" name="searchName" value="@ViewData["CurrentNameSearch"]">
                <button type="submit" value="Search" class="icon-btn"><i class="fa-solid fa-magnifying-glass"></i></button>
                <a type="button" class="btn btn-sm btn-primary btn-search" asp-action="Transactions">Back to Full List</a>

            </form>
        </div>



        @*        <div class="order-search">
        <form asp-controller="Admin" asp-action="Transactions">
        <input type="hidden" name="dateFrom" value="@fromDate" />
        <input type="hidden" name="dateTo" value="@toDate" />
        <p>
        Customer: <input type="text" name="searchName" value="@ViewData["CurrentNameSearch"]">
        or Order#: <input type="text" name="searchOrder" value="@ViewData["CurrentOrderSearch"]">
        <input type="submit" value="Search" />
        <a type="button" class="btn btn-sm btn-outline-secondary btn-search" asp-action="Transactions">Back to Full List</a>
        </p>
        </form>
        </div>
        *@


    </div>

    <table class="table">
        <thead class="table-heading">
            <tr>
                <th>
                    Order#
                </th>
                <th>
                    Customer
                </th>
                <th>
                    Email
                </th>
                <th>
                    Date Ordered
                </th>
                <th>
                    Order Value
                </th>
                <th>
                    Payment Date
                </th>
                <th>
                    Payment Type
                </th>
                <th>
                    Payment Id
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FullName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderDate)
                    </td>
                    <td>
                        $ @Html.DisplayFor(modelItem => item.OrderValue) @Html.DisplayFor(modelItem => item.Currency)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PaymentDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PaymentType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PaymentId)
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td>Number of Orders:</td>
                <td>@Model.FirstOrDefault()?.OrderCount</td>
                <td>Total Sales:</td>
                <td>$ @Model.FirstOrDefault()?.OrderTotalVal CAD</td>
            </tr>
        </tfoot>
    </table>

    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }

    <div class="paginated-list d-flex justify-content-center">
        <a asp-action="Transactions"
           asp-route-searchName="@ViewData["CurrentNameSearch"]"
           asp-route-searchOrder="@ViewData["CurrentOrderSearch"]"
           asp-route-dateFrom="@ViewData["CurrentFromDate"]"
           asp-route-dateTo=" @ViewData["CurrentToDate"]"
           asp-route-page="@(Model.PageIndex - 1)"
           class="btn btn-outline-secondary page-button @prevDisabled">&lt</a>
        <p>Page @(Model.TotalPages < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPages</p>
        <a asp-action="Transactions"
           asp-route-searchName="@ViewData["CurrentNameSearch"]"
           asp-route-searchOrder="@ViewData["CurrentOrderSearch"]"
           asp-route-dateFrom="@ViewData["CurrentFromDate"]"
           asp-route-dateTo=" @ViewData["CurrentToDate"]"
           asp-route-page="@(Model.PageIndex + 1)"
           class="btn btn-outline-secondary page-button @nextDisabled">&gt</a>
    </div>
</main>
